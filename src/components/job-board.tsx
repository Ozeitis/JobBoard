"use client";

/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/Ixydi5jz06w
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/
import React, { useCallback, useEffect, useState } from 'react';
import { Job, ApplyOption } from '@prisma/client';

import Link from "next/link"
import { Input } from "@/components/ui/input"
import { SelectValue, SelectTrigger, SelectItem, SelectContent, Select } from "@/components/ui/select"
import { CardTitle, CardDescription, CardHeader, CardContent, Card } from "@/components/ui/card"
import { HoverCardTrigger, HoverCardContent, HoverCard } from "@/components/ui/hover-card"
import { AvatarImage, AvatarFallback, Avatar } from "@/components/ui/avatar"
import { useInfiniteQuery } from '@tanstack/react-query'
import { Skeleton } from "@/components/ui/skeleton"
import { debounce } from "lodash";
import { JSX, SVGProps } from "react"
import axios from 'axios';

export function JobBoard() {
  const [jobs, setJobs] = useState([] as Job[]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [location, setLocation] = useState('');

  const fetchJobs = useCallback(async () => {
    setIsLoading(true);
    try {
      const params = new URLSearchParams({ search: searchTerm, location, page: '1', pageSize: '10' }).toString();
      const response = await axios.get(`/api/jobs?${params}`);
      setJobs(response.data.jobs);
    } catch (error) {
      console.error(error);
    } finally {
      setIsLoading(false);
    }
  }, [searchTerm, location]);

  useEffect(() => {
    const debouncedFetch = debounce(() => {
      fetchJobs();
    }, 500);
    debouncedFetch();
    return () => debouncedFetch.cancel();
  }, [fetchJobs]);

  const handleSearchChange = (e: { target: { value: React.SetStateAction<string>; }; }) => setSearchTerm(e.target.value);
  const handleLocationChange = (value: React.SetStateAction<string>) => setLocation(value);

  const renderSkeleton = () => (
    <div className="flex flex-col space-y-3">
      {[...Array(5)].map((_, index) => (
        <Skeleton key={index} className="h-24 w-full rounded-md" />
      ))}
    </div>
  );

  return (
    <div className="flex flex-col min-h-screen bg-white dark:bg-gray-900">
      <header className="flex items-center h-16 px-4 border-b dark:border-gray-800 md:px-6">
        <Link href="#">
          <img
            alt=""
            className="aspect-[2/1] overflow-hidden rounded-lg object-contain object-center"
            height="70"
            src="/placeholder.svg"
            width="140"
          />
          <span className="sr-only">Yeshiva University</span>
        </Link>
        <nav className="ml-auto flex gap-4 sm:gap-6">
          <Link className="text-sm font-medium hover:underline underline-offset-4" href="#">
            Home
          </Link>
          <Link className="text-sm font-medium hover:underline underline-offset-4" href="#">
            About
          </Link>
          <Link className="text-sm font-medium hover:underline underline-offset-4" href="#">
            Contact
          </Link>
        </nav>
      </header>
      <main className="flex-1">
        <section className="w-full py-12 md:py-24 lg:py-32">
          <div className="container px-4 md:px-6">
            <div className="grid gap-6 md:gap-8">
              <div className="flex flex-col md:flex-row items-start md:items-center gap-4 md:gap-8">
                <div className="grid gap-1">
                  <h1 className="text-2xl font-bold tracking-tight">Job Listings</h1>
                  <p className="text-gray-500 dark:text-gray-400">
                    Explore the latest job postings from top tech companies.
                  </p>
                </div>
                <div className="flex gap-4 md:gap-6 md:ml-auto">
                  <Input className="w-full md:w-64" placeholder="Search jobs..." type="search" value={searchTerm} onChange={handleSearchChange} />
                  <Select> { /* onChange={(value) => handleLocationChange(value)} */}
                    <SelectTrigger className="w-32">
                      <SelectValue placeholder="Location" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="New York">New York</SelectItem>
                      <SelectItem value="New Jersey">New Jersey</SelectItem>
                    </SelectContent>
                  </Select>
                  <Select>
                    <SelectTrigger className="w-32">
                      <SelectValue placeholder="Experience" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="internship">Internship</SelectItem>
                      <SelectItem value="newly-grad">Newly Grad</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div className="grid gap-6 md:gap-8">
                {isLoading ? renderSkeleton() : jobs.map((job, index) => (
                  <>
                    <Card key={index}>
                      <CardHeader className="flex flex-row items-center gap-4">
                        <BriefcaseIcon className="h-6 w-6" />
                        <div className="grid gap-1">
                          <CardTitle>{job.job_title}</CardTitle>
                          <CardDescription>
                            <HoverCard>
                              <HoverCardTrigger asChild>
                                <span className="underline">{job.employer_name}</span>
                              </HoverCardTrigger>
                              <HoverCardContent className="w-80">
                                <div className="flex justify-between space-x-4">
                                  <Avatar>
                                    <AvatarImage src={job.employer_logo ?? undefined} alt={job.employer_name ?? undefined} />
                                    <AvatarFallback>G</AvatarFallback>
                                  </Avatar>
                                  <div className="space-y-1">
                                    <h4 className="text-sm font-semibold">{job.employer_name}</h4>
                                    <p className="text-sm">
                                      {job.job_city}, {job.job_state}
                                    </p>
                                    <Link className="text-sm underline text-blue-500" href="#">
                                      Visit Website
                                    </Link>
                                  </div>
                                </div>
                              </HoverCardContent>
                            </HoverCard>
                            , {job.job_city}, {job.job_state}{"\n                                          "}
                          </CardDescription>
                        </div>
                        <div className="ml-auto text-sm text-gray-500 dark:text-gray-400">Apply by: {job.job_offer_expiration_datetime_utc ? new Date(job.job_offer_expiration_datetime_utc).toLocaleDateString() : 'N/A'}</div>
                      </CardHeader>
                      <CardContent className="grid gap-2">
                        <p className="text-sm text-gray-500 dark:text-gray-400">
                          {job.job_description}
                        </p>
                        <div className="grid gap-2">
                          <div className="text-sm text-gray-500 dark:text-gray-400">
                            <strong>Estimated Salary: </strong>
                            ${job.job_min_salary} - ${job.job_max_salary}{"\n                                          "}
                          </div>
                          <div className="text-sm text-gray-500 dark:text-gray-400">
                            <strong>Start Date:</strong>
                            Immediate{"\n                                          "}
                          </div>
                          <div className="text-sm text-gray-500 dark:text-gray-400">
                            <strong>Experience:</strong>
                            2+ years{"\n                                          "}
                          </div>
                          <div className="text-sm text-gray-500 dark:text-gray-400">
                            <strong>Qualifications:</strong>
                            {Array.isArray(job.job_required_skills) ? job.job_required_skills.join(', ') : 'N/A'}{"\n                                          "}
                          </div>
                        </div>
                        <Link
                          className="inline-flex h-9 items-center justify-center rounded-md bg-gray-900 px-4 py-2 text-sm font-medium text-gray-50 shadow transition-colors hover:bg-gray-900/90 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-gray-950 disabled:pointer-events-none disabled:opacity-50 dark:bg-gray-50 dark:text-gray-900 dark:hover:bg-gray-50/90 dark:focus-visible:ring-gray-300"
                          href={job.job_apply_link}
                        >
                          View Details
                        </Link>
                      </CardContent>
                    </Card>
                  </>
                ))}
              </div>
            </div>
          </div>
        </section>
      </main>
    </div>
  )
}

function BriefcaseIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <rect width="20" height="14" x="2" y="7" rx="2" ry="2" />
      <path d="M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16" />
    </svg>
  )
}


function ExternalLinkIcon(props: JSX.IntrinsicAttributes & SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" />
      <polyline points="15 3 21 3 21 9" />
      <line x1="10" x2="21" y1="14" y2="3" />
    </svg>
  )
}
